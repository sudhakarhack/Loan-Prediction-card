import streamlit as st
import numpy as np
import joblib

# Language translations dictionary
translations = {
    "English": {
        "title": "üè¶ Loan Prediction App",
        "description": "Fill in the details below to check loan eligibility.",
        "gender": "Gender",
        "gender_options": ["Male", "Female"],
        "married": "Married",
        "married_options": ["Yes", "No"],
        "education": "Education",
        "education_options": ["Graduate", "Not Graduate"],
        "self_employed": "Self Employed",
        "self_employed_options": ["Yes", "No"],
        "property_area": "Property Area",
        "property_area_options": ["Urban", "Semiurban", "Rural"],
        "applicant_income": "Applicant Income",
        "coapplicant_income": "Coapplicant Income",
        "property_value": "Property Value (in Lakhs)",
        "loan_term": "Loan Term (in months)",
        "check_button": "Check Eligibility",
        "loan_approved": "‚úÖ Loan Sanctioned! (Approval Probability: {:.2f})",
        "loan_rejected": "‚ùå Loan Not Sanctioned (Approval Probability: {:.2f})"
    },
    "Telugu": {
        "title": "üè¶ ‡∞ã‡∞£ ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞Ö‡∞™‡±ç‡∞≤‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç",
        "description": "‡∞ï‡∞ø‡∞Ç‡∞¶ ‡∞â‡∞®‡±ç‡∞® ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å ‡∞™‡±Ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ã‡∞£ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "gender": "‡∞≤‡∞ø‡∞Ç‡∞ó‡∞Ç",
        "gender_options": ["‡∞™‡±Å‡∞∞‡±Å‡∞∑‡±Å‡∞°‡±Å", "‡∞∏‡±ç‡∞§‡±ç‡∞∞‡±Ä"],
        "married": "‡∞µ‡∞ø‡∞µ‡∞æ‡∞π‡∞ø‡∞§‡∞æ ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø",
        "married_options": ["‡∞Ö‡∞µ‡±Å‡∞®‡±Å", "‡∞ï‡∞æ‡∞¶‡±Å"],
        "education": "‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø",
        "education_options": ["‡∞¨‡∞ø‡∞∞‡±Å‡∞¶‡±Å", "‡∞¨‡∞ø‡∞∞‡±Å‡∞¶‡±Å ‡∞≤‡±á‡∞®‡∞ø"],
        "self_employed": "‡∞∏‡±ç‡∞µ‡∞Ø‡∞Ç ‡∞â‡∞™‡∞æ‡∞ß‡∞ø",
        "self_employed_options": ["‡∞Ö‡∞µ‡±Å‡∞®‡±Å", "‡∞ï‡∞æ‡∞¶‡±Å"],
        "property_area": "‡∞™‡±ç‡∞∞‡∞æ‡∞™‡∞∞‡±ç‡∞ü‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞Ç",
        "property_area_options": ["‡∞®‡∞ó‡∞∞‡∞Ç", "‡∞Ö‡∞∞‡±ç‡∞¨‡∞®‡±ç", "‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ‡∞Ç"],
        "applicant_income": "‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å‡∞¶‡∞æ‡∞∞‡±Å ‡∞Ü‡∞¶‡∞æ‡∞Ø‡∞Ç",
        "coapplicant_income": "‡∞∏‡∞π ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å‡∞¶‡∞æ‡∞∞‡±Å ‡∞Ü‡∞¶‡∞æ‡∞Ø‡∞Ç",
        "property_value": "‡∞™‡±ç‡∞∞‡∞æ‡∞™‡∞∞‡±ç‡∞ü‡±Ä ‡∞µ‡∞ø‡∞≤‡±Å‡∞µ (‡∞≤‡∞ï‡±ç‡∞∑‡∞≤‡±ç‡∞≤‡±ã)",
        "loan_term": "‡∞ã‡∞£ ‡∞ï‡∞æ‡∞≤‡∞Ç (‡∞®‡±Ü‡∞≤‡∞≤‡±ç‡∞≤‡±ã)",
        "check_button": "‡∞Ö‡∞∞‡±ç‡∞π‡∞§‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "loan_approved": "‚úÖ ‡∞ã‡∞£ ‡∞Æ‡∞Ç‡∞ú‡±Ç‡∞∞‡±à‡∞Ç‡∞¶‡∞ø! (‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø‡∞Ç‡∞ö‡±á ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞Ç: {:.2f})",
        "loan_rejected": "‚ùå ‡∞ã‡∞£ ‡∞§‡∞ø‡∞∞‡∞∏‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø (‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø‡∞Ç‡∞ö‡±á ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞Ç: {:.2f})"
    },
    "Hindi": {
        "title": "üè¶ ‡§≤‡•ã‡§® ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ê‡§™",
        "description": "‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§≤‡•ã‡§® ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§",
        "gender": "‡§≤‡§ø‡§Ç‡§ó",
        "gender_options": ["‡§™‡•Å‡§∞‡•Å‡§∑", "‡§Æ‡§π‡§ø‡§≤‡§æ"],
        "married": "‡§µ‡•à‡§µ‡§æ‡§π‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "married_options": ["‡§π‡§æ‡§Å", "‡§®‡§π‡•Ä‡§Ç"],
        "education": "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ",
        "education_options": ["‡§∏‡•ç‡§®‡§æ‡§§‡§ï", "‡§ó‡•à‡§∞-‡§∏‡•ç‡§®‡§æ‡§§‡§ï"],
        "self_employed": "‡§∏‡•ç‡§µ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞",
        "self_employed_options": ["‡§π‡§æ‡§Å", "‡§®‡§π‡•Ä‡§Ç"],
        "property_area": "‡§∏‡§Ç‡§™‡§§‡•ç‡§§‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞",
        "property_area_options": ["‡§∂‡§π‡§∞‡•Ä", "‡§Ö‡§∞‡•ç‡§ß-‡§∂‡§π‡§∞‡•Ä", "‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£"],
        "applicant_income": "‡§Ü‡§µ‡•á‡§¶‡§ï ‡§ï‡•Ä ‡§Ü‡§Ø",
        "coapplicant_income": "‡§∏‡§π-‡§Ü‡§µ‡•á‡§¶‡§ï ‡§ï‡•Ä ‡§Ü‡§Ø",
        "property_value": "‡§∏‡§Ç‡§™‡§§‡•ç‡§§‡§ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‡§≤‡§æ‡§ñ‡•ã‡§Ç ‡§Æ‡•á‡§Ç)",
        "loan_term": "‡§≤‡•ã‡§® ‡§Ö‡§µ‡§ß‡§ø (‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç)",
        "check_button": "‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
        "loan_approved": "‚úÖ ‡§≤‡•ã‡§® ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§! (‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§‡§ø ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ: {:.2f})",
        "loan_rejected": "‚ùå ‡§≤‡•ã‡§® ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ (‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§‡§ø ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ: {:.2f})"
    },
    "Tamil": {
        "title": "üè¶ ‡Æï‡Æü‡Æ©‡Øç ‡Æï‡Æ£‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø",
        "description": "‡Æï‡ØÄ‡Æ¥‡Øá ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æ®‡Æø‡Æ∞‡Æ™‡Øç‡Æ™‡Æø, ‡Æï‡Æü‡Æ©‡Øç ‡Æ§‡Æï‡ØÅ‡Æ§‡Æø‡ÆØ‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "gender": "‡Æ™‡Ææ‡Æ≤‡Æø‡Æ©‡ÆÆ‡Øç",
        "gender_options": ["‡ÆÜ‡Æ£‡Øç", "‡Æ™‡ØÜ‡Æ£‡Øç"],
        "married": "‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Æ£ ‡Æ®‡Æø‡Æ≤‡Øà",
        "married_options": ["‡ÆÜ‡ÆÆ‡Øç", "‡Æá‡Æ≤‡Øç‡Æ≤‡Øà"],
        "education": "‡Æï‡Æ≤‡Øç‡Æµ‡Æø",
        "education_options": ["‡Æ™‡Æü‡Øç‡Æü‡Æ§‡Ææ‡Æ∞‡Æø", "‡Æ™‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æ≤‡Øç‡Æ≤‡Ææ‡Æ§‡Æµ‡Æ∞‡Øç"],
        "self_employed": "‡Æö‡ØÅ‡ÆØ ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç",
        "self_employed_options": ["‡ÆÜ‡ÆÆ‡Øç", "‡Æá‡Æ≤‡Øç‡Æ≤‡Øà"],
        "property_area": "‡Æö‡Øä‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡Æï‡ØÅ‡Æ§‡Æø",
        "property_area_options": ["‡Æ®‡Æï‡Æ∞‡ÆÆ‡Øç", "‡ÆÖ‡Æ∞‡Æø‡ÆÆ‡ØÅ‡Æï ‡Æ®‡Æï‡Æ∞‡ÆÆ‡Øç", "‡Æï‡Æø‡Æ∞‡Ææ‡ÆÆ‡ÆÆ‡Øç"],
        "applicant_income": "‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡Æ§‡Ææ‡Æ∞‡Æ∞‡Øç ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç",
        "coapplicant_income": "‡Æö‡Æï ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡Æ§‡Ææ‡Æ∞‡Æ∞‡Øç ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç",
        "property_value": "‡Æö‡Øä‡Æ§‡Øç‡Æ§‡ØÅ ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ (‡Æ≤‡Æü‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç)",
        "loan_term": "‡Æï‡Æü‡Æ©‡Øç ‡Æï‡Ææ‡Æ≤‡ÆÆ‡Øç (‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç)",
        "check_button": "‡Æ§‡Æï‡ØÅ‡Æ§‡Æø‡ÆØ‡Øà‡Æö‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "loan_approved": "‚úÖ ‡Æï‡Æü‡Æ©‡Øç ‡Æí‡Æ™‡Øç‡Æ™‡ØÅ‡Æ§‡Æ≤‡Øç! (‡Æí‡Æ™‡Øç‡Æ™‡ØÅ‡Æ§‡Æ≤‡Øç ‡Æö‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç: {:.2f})",
        "loan_rejected": "‚ùå ‡Æï‡Æü‡Æ©‡Øç ‡Æ®‡Æø‡Æ∞‡Ææ‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ (‡Æí‡Æ™‡Øç‡Æ™‡ØÅ‡Æ§‡Æ≤‡Øç ‡Æö‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç: {:.2f})"
    }
}

# Load ML model if available
def load_model():
    try:
        return joblib.load("loan_model.pkl")
    except:
        return None

# Predict eligibility (dummy rule if model not found)
def predict_loan(inputs):
    model = load_model()
    if model:
        pred = model.predict([inputs])[0]
        prob = model.predict_proba([inputs])[0][1]
    else:
        prob = np.random.uniform(0.6, 0.9) if inputs[0] == 1 and inputs[4] > 50000 else np.random.uniform(0.2, 0.5)
        pred = "Loan Sanctioned" if prob > 0.5 else "Loan Not Sanctioned"
    return pred, prob

# UI starts
language = st.selectbox("Select Language", list(translations.keys()))
t = translations[language]

st.title(t["title"])
st.write(t["description"])

gender = st.selectbox(t["gender"], t["gender_options"])
married = st.selectbox(t["married"], t["married_options"])
education = st.selectbox(t["education"], t["education_options"])
self_employed = st.selectbox(t["self_employed"], t["self_employed_options"])
property_area = st.selectbox(t["property_area"], t["property_area_options"])
applicant_income = st.number_input(t["applicant_income"], min_value=0, value=60000)
coapplicant_income = st.number_input(t["coapplicant_income"], min_value=0, value=40000)
property_value = st.number_input(t["property_value"], min_value=0, value=80000)
loan_term = st.number_input(t["loan_term"], min_value=1, value=360)

# Mapping categorical data to numbers (model input format)
gender = 1 if gender in ["Male", "‡∞™‡±Å‡∞∞‡±Å‡∞∑‡±Å‡∞°‡±Å", "‡§™‡•Å‡§∞‡•Å‡§∑", "‡ÆÜ‡Æ£‡Øç"] else 0
married = 1 if married in ["Yes", "‡∞Ö‡∞µ‡±Å‡∞®‡±Å", "‡§π‡§æ‡§Å", "‡ÆÜ‡ÆÆ‡Øç"] else 0
education = 1 if education in ["Graduate", "‡∞¨‡∞ø‡∞∞‡±Å‡∞¶‡±Å", "‡§∏‡•ç‡§®‡§æ‡§§‡§ï", "‡Æ™‡Æü‡Øç‡Æü‡Æ§‡Ææ‡Æ∞‡Æø"] else 0
self_employed = 1 if self_employed in ["Yes", "‡∞Ö‡∞µ‡±Å‡∞®‡±Å", "‡§π‡§æ‡§Å", "‡ÆÜ‡ÆÆ‡Øç"] else 0
property_area = {"Urban": 2, "Semiurban": 1, "Rural": 0,
                 "‡∞®‡∞ó‡∞∞‡∞Ç": 2, "‡∞Ö‡∞∞‡±ç‡∞¨‡∞®‡±ç": 1, "‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ‡∞Ç": 0,
                 "‡§∂‡§π‡§∞‡•Ä": 2, "‡§Ö‡§∞‡•ç‡§ß-‡§∂‡§π‡§∞‡•Ä": 1, "‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£": 0,
                 "‡Æ®‡Æï‡Æ∞‡ÆÆ‡Øç": 2, "‡ÆÖ‡Æ∞‡Æø‡ÆÆ‡ØÅ‡Æï ‡Æ®‡Æï‡Æ∞‡ÆÆ‡Øç": 1, "‡Æï‡Æø‡Æ∞‡Ææ‡ÆÆ‡ÆÆ‡Øç": 0}[property_area]

inputs = [gender, married, education, self_employed, applicant_income, coapplicant_income, property_value, loan_term, property_area]

if st.button(t["check_button"]):
    pred, prob = predict_loan(inputs)
    st.success(t["loan_approved"].format(prob) if "Sanctioned" in pred else t["loan_rejected"].format(prob))
